# Generated by Django 5.2 on 2025-08-08 10:00
# Oracle-compatible initial migration for surveys

import django.db.models.deletion
import surveys.models
import uuid
from django.conf import settings
from django.db import migrations, models, connection


def _oracle_type_for(cursor, table_name, column_name):
    """
    Return an Oracle column type string exactly matching an existing column,
    e.g. NUMBER(19), CHAR(32), VARCHAR2(150), RAW(16), NUMBER, NUMBER(10,2)
    """
    cursor.execute(
        """
        SELECT data_type, data_length, data_precision, data_scale
        FROM user_tab_columns
        WHERE table_name = :t AND column_name = :c
        """,
        {"t": table_name.upper(), "c": column_name.upper()},
    )
    row = cursor.fetchone()
    if not row:
        raise RuntimeError(f"Column {table_name}.{column_name} not found in Oracle metadata")

    data_type, data_length, data_precision, data_scale = row
    data_type = data_type.upper()

    if data_type in ("CHAR", "NCHAR", "VARCHAR2", "NVARCHAR2", "RAW"):
        return f"{data_type}({int(data_length)})"

    if data_type == "NUMBER":
        if data_precision is None:
            return "NUMBER"
        if data_scale is None or int(data_scale) == 0:
            return f"NUMBER({int(data_precision)})"
        return f"NUMBER({int(data_precision)},{int(data_scale)})"

    # Fallback
    if data_length:
        return f"{data_type}({int(data_length)})"
    return data_type


def create_surveys_tables(apps, schema_editor):
    """Create surveys tables with Oracle-compatible SQL"""
    
    # Skip table creation on Oracle - let Django's CreateModel handle it
    if connection.vendor == 'oracle':
        return
    
    with connection.cursor() as cursor:
        # Create SURVEYS_SURVEY table
        cursor.execute("""
            CREATE TABLE SURVEYS_SURVEY (
                ID RAW(16) DEFAULT SYS_GUID() PRIMARY KEY,
                TITLE CLOB,
                TITLE_HASH VARCHAR2(64),
                DESCRIPTION CLOB,
                VISIBILITY VARCHAR2(8) DEFAULT 'AUTH' NOT NULL,
                IS_LOCKED NUMBER(1) DEFAULT 0 NOT NULL,
                IS_ACTIVE NUMBER(1) DEFAULT 1 NOT NULL,
                CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
                UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
                DELETED_AT TIMESTAMP,
                CREATOR_ID NUMBER(38) NOT NULL,
                START_DATE TIMESTAMP,
                END_DATE TIMESTAMP,
                CONSTRAINT FK_SURVEYS_SURVEY_CREATOR 
                    FOREIGN KEY (CREATOR_ID) REFERENCES AUTHENTICATION_USER(ID)
            )
        """)
        
        # Create SURVEYS_QUESTION table
        cursor.execute("""
            CREATE TABLE SURVEYS_QUESTION (
                ID RAW(16) DEFAULT SYS_GUID() PRIMARY KEY,
                TEXT CLOB NOT NULL,
                TEXT_HASH VARCHAR2(64),
                QUESTION_TYPE VARCHAR2(20) DEFAULT 'text' NOT NULL,
                OPTIONS CLOB,
                IS_REQUIRED NUMBER(1) DEFAULT 0 NOT NULL,
                ORDER_NUM NUMBER(10) DEFAULT 0 NOT NULL,
                CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
                UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
                SURVEY_ID RAW(16) NOT NULL,
                CONSTRAINT FK_SURVEYS_QUESTION_SURVEY 
                    FOREIGN KEY (SURVEY_ID) REFERENCES SURVEYS_SURVEY(ID) ON DELETE CASCADE
            )
        """)
        
        # Create SURVEYS_RESPONSE table
        cursor.execute("""
            CREATE TABLE SURVEYS_RESPONSE (
                ID RAW(16) DEFAULT SYS_GUID() PRIMARY KEY,
                SUBMITTED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
                IS_COMPLETE NUMBER(1) DEFAULT 1 NOT NULL,
                IP_ADDRESS VARCHAR2(39),
                RESPONDENT_EMAIL VARCHAR2(254),
                RESPONDENT_ID NUMBER(38),
                SURVEY_ID RAW(16) NOT NULL,
                CONSTRAINT FK_SURVEYS_RESPONSE_SURVEY 
                    FOREIGN KEY (SURVEY_ID) REFERENCES SURVEYS_SURVEY(ID) ON DELETE CASCADE,
                CONSTRAINT FK_SURVEYS_RESPONSE_RESPONDENT 
                    FOREIGN KEY (RESPONDENT_ID) REFERENCES AUTHENTICATION_USER(ID) ON DELETE SET NULL
            )
        """)
        
        # Create SURVEYS_ANSWER table
        cursor.execute("""
            CREATE TABLE SURVEYS_ANSWER (
                ID NUMBER(38) PRIMARY KEY,
                ANSWER_TEXT CLOB NOT NULL,
                CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
                RESPONSE_ID RAW(16) NOT NULL,
                QUESTION_ID RAW(16) NOT NULL,
                CONSTRAINT FK_SURVEYS_ANSWER_RESPONSE 
                    FOREIGN KEY (RESPONSE_ID) REFERENCES SURVEYS_RESPONSE(ID) ON DELETE CASCADE,
                CONSTRAINT FK_SURVEYS_ANSWER_QUESTION 
                    FOREIGN KEY (QUESTION_ID) REFERENCES SURVEYS_QUESTION(ID) ON DELETE CASCADE,
                CONSTRAINT UK_SURVEYS_ANSWER_RESP_QUEST 
                    UNIQUE (RESPONSE_ID, QUESTION_ID)
            )
        """)
        
        # Create SURVEYS_PUBLIC_ACCESS_TOKEN table
        cursor.execute("""
            CREATE TABLE SURVEYS_PUBLIC_ACCESS_TOKEN (
                ID RAW(16) DEFAULT SYS_GUID() PRIMARY KEY,
                TOKEN VARCHAR2(64) UNIQUE NOT NULL,
                CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
                EXPIRES_AT TIMESTAMP NOT NULL,
                IS_ACTIVE NUMBER(1) DEFAULT 1 NOT NULL,
                CREATED_BY_ID NUMBER(38) NOT NULL,
                SURVEY_ID RAW(16) NOT NULL,
                CONSTRAINT FK_SURVEYS_TOKEN_CREATED_BY 
                    FOREIGN KEY (CREATED_BY_ID) REFERENCES AUTHENTICATION_USER(ID) ON DELETE CASCADE,
                CONSTRAINT FK_SURVEYS_TOKEN_SURVEY 
                    FOREIGN KEY (SURVEY_ID) REFERENCES SURVEYS_SURVEY(ID) ON DELETE CASCADE
            )
        """)
        
        # Create sequence for SURVEYS_ANSWER ID
        cursor.execute("""
            CREATE SEQUENCE SURVEYS_ANSWER_ID_SEQ
            START WITH 1
            INCREMENT BY 1
            NOCACHE
        """)
        
        # Create trigger for SURVEYS_ANSWER ID auto-increment
        cursor.execute("""
            CREATE OR REPLACE TRIGGER SURVEYS_ANSWER_ID_TRG
            BEFORE INSERT ON SURVEYS_ANSWER
            FOR EACH ROW
            BEGIN
                IF :NEW.ID IS NULL THEN
                    SELECT SURVEYS_ANSWER_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
                END IF;
            END;
        """)
        
        # Create SURVEYS_SURVEY_SHARED_WITH table (many-to-many)
        cursor.execute("""
            CREATE TABLE SURVEYS_SURVEY_SHARED_WITH (
                ID NUMBER(38) PRIMARY KEY,
                SURVEY_ID RAW(16) NOT NULL,
                USER_ID NUMBER(38) NOT NULL,
                CONSTRAINT FK_SURVEYS_SHARED_SURVEY 
                    FOREIGN KEY (SURVEY_ID) REFERENCES SURVEYS_SURVEY(ID) ON DELETE CASCADE,
                CONSTRAINT FK_SURVEYS_SHARED_USER 
                    FOREIGN KEY (USER_ID) REFERENCES AUTHENTICATION_USER(ID) ON DELETE CASCADE,
                CONSTRAINT UK_SURVEYS_SHARED_SURVEY_USER 
                    UNIQUE (SURVEY_ID, USER_ID)
            )
        """)
        
        # Create sequence for SURVEYS_SURVEY_SHARED_WITH ID
        cursor.execute("""
            CREATE SEQUENCE SURVEYS_SURVEY_SHARED_WITH_ID_SEQ
            START WITH 1
            INCREMENT BY 1
            NOCACHE
        """)
        
        # Create trigger for SURVEYS_SURVEY_SHARED_WITH ID
        cursor.execute("""
            CREATE OR REPLACE TRIGGER SURVEYS_SURVEY_SHARED_WITH_TRG
            BEFORE INSERT ON SURVEYS_SURVEY_SHARED_WITH
            FOR EACH ROW
            BEGIN
                IF :NEW.ID IS NULL THEN
                    SELECT SURVEYS_SURVEY_SHARED_WITH_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
                END IF;
            END;
        """)
        
        # Create SURVEYS_SURVEY_SHARED_WITH_GROUPS table (many-to-many)
        print("üîß Creating SURVEYS_SURVEY_SHARED_WITH_GROUPS table...")
        
        # Get exact column types from existing tables
        try:
            survey_id_type = _oracle_type_for(cursor, "SURVEYS_SURVEY", "ID")
            group_id_type = _oracle_type_for(cursor, "AUTHENTICATION_GROUP", "ID")
        except RuntimeError as e:
            print(f"‚ùå Error getting column types: {e}")
            # Fallback to hardcoded types if tables don't exist yet
            survey_id_type = "RAW(16)"
            group_id_type = "NUMBER(38)"
        
        # Use numeric type for the primary key
        id_type = group_id_type if group_id_type.startswith("NUMBER") else "NUMBER(19)"
        
        print(f"   Survey ID type: {survey_id_type}")
        print(f"   Group ID type: {group_id_type}")
        print(f"   Table ID type: {id_type}")
        
        # Clean up if partially exists
        cleanup_statements = [
            "DROP TRIGGER SURVEYS_SURVEY_SHARED_GRP_TRG",
            "DROP TABLE SURVEYS_SURVEY_SHARED_WITH_GROUPS CASCADE CONSTRAINTS",
            "DROP SEQUENCE SURVEYS_SURVEY_SHARED_GRP_ID_SEQ",
        ]
        
        for sql in cleanup_statements:
            try:
                cursor.execute(sql)
                print(f"   Cleaned up: {sql}")
            except Exception:
                pass  # ignore if it doesn't exist
        
        cursor.execute(f"""
            CREATE TABLE SURVEYS_SURVEY_SHARED_WITH_GROUPS (
                ID {id_type} PRIMARY KEY,
                SURVEY_ID {survey_id_type} NOT NULL,
                GROUP_ID {group_id_type} NOT NULL,
                CONSTRAINT FK_SURVEYS_SSG_SURVEY 
                    FOREIGN KEY (SURVEY_ID) REFERENCES SURVEYS_SURVEY(ID) ON DELETE CASCADE,
                CONSTRAINT FK_SURVEYS_SSG_GROUP 
                    FOREIGN KEY (GROUP_ID) REFERENCES AUTHENTICATION_GROUP(ID) ON DELETE CASCADE,
                CONSTRAINT UK_SURVEYS_SSG 
                    UNIQUE (SURVEY_ID, GROUP_ID)
            )
        """)
        print("   ‚úÖ Table created")
        
        # Create sequence for SURVEYS_SURVEY_SHARED_WITH_GROUPS ID
        cursor.execute("""
            CREATE SEQUENCE SURVEYS_SSG_ID_SEQ
            START WITH 1
            INCREMENT BY 1
            NOCACHE
        """)
        print("   ‚úÖ Sequence created")
        
        # Create trigger for SURVEYS_SURVEY_SHARED_WITH_GROUPS ID
        cursor.execute("""
            CREATE OR REPLACE TRIGGER SURVEYS_SSG_ID_TRG
            BEFORE INSERT ON SURVEYS_SURVEY_SHARED_WITH_GROUPS
            FOR EACH ROW
            BEGIN
                IF :NEW.ID IS NULL THEN
                    SELECT SURVEYS_SSG_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
                END IF;
            END;
        """)
        print("   ‚úÖ Trigger created")
        
        # Create indexes for performance
        indexes = [
            "CREATE INDEX IDX_SURVEYS_SURVEY_CREATOR ON SURVEYS_SURVEY(CREATOR_ID)",
            "CREATE INDEX IDX_SURVEYS_SURVEY_VISIBILITY ON SURVEYS_SURVEY(VISIBILITY)",
            "CREATE INDEX IDX_SURVEYS_SURVEY_ACTIVE ON SURVEYS_SURVEY(IS_ACTIVE)",
            "CREATE INDEX IDX_SURVEYS_SURVEY_CREATED ON SURVEYS_SURVEY(CREATED_AT)",
            "CREATE INDEX IDX_SURVEYS_SURVEY_DELETED ON SURVEYS_SURVEY(DELETED_AT)",
            "CREATE INDEX IDX_SURVEYS_SURVEY_TITLE_HASH ON SURVEYS_SURVEY(TITLE_HASH)",
            "CREATE INDEX IDX_SURVEYS_SURVEY_START_DATE ON SURVEYS_SURVEY(START_DATE)",
            "CREATE INDEX IDX_SURVEYS_SURVEY_END_DATE ON SURVEYS_SURVEY(END_DATE)",
            
            "CREATE INDEX IDX_SURVEYS_QUESTION_SURVEY ON SURVEYS_QUESTION(SURVEY_ID)",
            "CREATE INDEX IDX_SURVEYS_QUESTION_ORDER ON SURVEYS_QUESTION(ORDER_NUM)",
            "CREATE INDEX IDX_SURVEYS_QUESTION_TEXT_HASH ON SURVEYS_QUESTION(TEXT_HASH)",
            
            "CREATE INDEX IDX_SURVEYS_RESPONSE_SURVEY ON SURVEYS_RESPONSE(SURVEY_ID)",
            "CREATE INDEX IDX_SURVEYS_RESPONSE_RESPONDENT ON SURVEYS_RESPONSE(RESPONDENT_ID)",
            "CREATE INDEX IDX_SURVEYS_RESPONSE_SUBMITTED ON SURVEYS_RESPONSE(SUBMITTED_AT)",
            
            "CREATE INDEX IDX_SURVEYS_ANSWER_RESPONSE ON SURVEYS_ANSWER(RESPONSE_ID)",
            "CREATE INDEX IDX_SURVEYS_ANSWER_QUESTION ON SURVEYS_ANSWER(QUESTION_ID)",
            
            "CREATE INDEX IDX_SURVEYS_SHARED_SURVEY ON SURVEYS_SURVEY_SHARED_WITH(SURVEY_ID)",
            "CREATE INDEX IDX_SURVEYS_SHARED_USER ON SURVEYS_SURVEY_SHARED_WITH(USER_ID)",
            
            "CREATE INDEX IDX_SURVEYS_SSG_SURVEY ON SURVEYS_SURVEY_SHARED_WITH_GROUPS(SURVEY_ID)",
            "CREATE INDEX IDX_SURVEYS_SSG_GROUP ON SURVEYS_SURVEY_SHARED_WITH_GROUPS(GROUP_ID)",
            
            "CREATE INDEX IDX_SURVEYS_TOKEN_TOKEN ON SURVEYS_PUBLIC_ACCESS_TOKEN(TOKEN)",
            "CREATE INDEX IDX_SURVEYS_TOKEN_SURVEY ON SURVEYS_PUBLIC_ACCESS_TOKEN(SURVEY_ID)",
            "CREATE INDEX IDX_SURVEYS_TOKEN_EXPIRES ON SURVEYS_PUBLIC_ACCESS_TOKEN(EXPIRES_AT)",
            "CREATE INDEX IDX_SURVEYS_TOKEN_ACTIVE ON SURVEYS_PUBLIC_ACCESS_TOKEN(IS_ACTIVE)"
        ]
        
        for index_sql in indexes:
            try:
                cursor.execute(index_sql)
            except Exception as e:
                # Index might already exist, continue
                pass
        
        print("   ‚úÖ Indexes created")
        print("‚úÖ SURVEYS_SURVEY_SHARED_WITH_GROUPS table creation complete!")


def drop_surveys_tables(apps, schema_editor):
    """Drop surveys tables"""
    
    # Skip table dropping on Oracle - let Django handle it
    if connection.vendor == 'oracle':
        return
        
    with connection.cursor() as cursor:
        tables_to_drop = [
            "SURVEYS_SURVEY_SHARED_WITH_GROUPS",
            "SURVEYS_SURVEY_SHARED_WITH", 
            "SURVEYS_PUBLIC_ACCESS_TOKEN",
            "SURVEYS_ANSWER",
            "SURVEYS_RESPONSE",
            "SURVEYS_QUESTION",
            "SURVEYS_SURVEY"
        ]
        
        sequences_to_drop = [
            "SURVEYS_SSG_ID_SEQ",
            "SURVEYS_SURVEY_SHARED_WITH_ID_SEQ",
            "SURVEYS_ANSWER_ID_SEQ"
        ]
        
        for table in tables_to_drop:
            try:
                cursor.execute(f"DROP TABLE {table} CASCADE CONSTRAINTS")
            except Exception:
                pass
        
        for seq in sequences_to_drop:
            try:
                cursor.execute(f"DROP SEQUENCE {seq}")
            except Exception:
                pass
        
        # Drop triggers
        triggers_to_drop = [
            "SURVEYS_SSG_ID_TRG",
            "SURVEYS_SURVEY_SHARED_WITH_TRG",
            "SURVEYS_ANSWER_ID_TRG"
        ]
        
        for trigger in triggers_to_drop:
            try:
                cursor.execute(f"DROP TRIGGER {trigger}")
            except Exception:
                pass


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('authentication', '0001_initial'),
    ]

    operations = [
        # Create Django model definitions (for Django's migration system)
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', surveys.models.EncryptedCharField(help_text='Survey title (encrypted)', max_length=255)),
                ('title_hash', models.CharField(blank=True, help_text='SHA256 hash of title for search indexing', max_length=64)),
                ('description', surveys.models.EncryptedTextField(blank=True, help_text='Survey description (encrypted)')),
                ('visibility', models.CharField(choices=[('PRIVATE', 'Creator & shared list'), ('AUTH', 'All authenticated users'), ('PUBLIC', 'Everyone, even anonymous'), ('GROUPS', 'Shared with specific groups')], default='AUTH', help_text='Survey visibility level', max_length=8)),
                ('start_date', models.DateTimeField(blank=True, help_text='Survey start date/time. If not set, survey starts immediately when created.', null=True)),
                ('end_date', models.DateTimeField(blank=True, help_text='Survey end date/time. If not set, survey runs indefinitely.', null=True)),
                ('is_locked', models.BooleanField(default=False, help_text='Whether survey is locked for editing')),
                ('is_active', models.BooleanField(default=True, help_text='Whether survey is active and accepting responses')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('creator', models.ForeignKey(help_text='User who created this survey', on_delete=django.db.models.deletion.CASCADE, related_name='created_surveys', to=settings.AUTH_USER_MODEL)),
                ('shared_with', models.ManyToManyField(blank=True, help_text='Users who can access this private survey', related_name='shared_surveys', to=settings.AUTH_USER_MODEL)),
                ('shared_with_groups', models.ManyToManyField(blank=True, help_text='Groups who can access this survey', related_name='shared_surveys_groups', to='authentication.group')),
            ],
            options={
                'verbose_name': 'Survey',
                'verbose_name_plural': 'Surveys',
                'db_table': 'surveys_survey',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('respondent_email', models.EmailField(blank=True, help_text='Email for anonymous responses (when respondent is null)', max_length=254, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('is_complete', models.BooleanField(default=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('respondent', models.ForeignKey(blank=True, help_text='Null for anonymous responses', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='survey_responses', to=settings.AUTH_USER_MODEL)),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='surveys.survey')),
            ],
            options={
                'verbose_name': 'Response',
                'verbose_name_plural': 'Responses',
                'db_table': 'surveys_response',
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text', surveys.models.EncryptedTextField(help_text='Question text (encrypted)')),
                ('text_hash', models.CharField(blank=True, help_text='SHA256 hash of question text for search indexing', max_length=64)),
                ('question_type', models.CharField(choices=[('text', 'Text Input'), ('textarea', 'Long Text'), ('single_choice', 'Single Choice'), ('multiple_choice', 'Multiple Choice'), ('rating', 'Rating Scale'), ('yes_no', 'Yes/No')], default='text', max_length=20)),
                ('options', surveys.models.EncryptedTextField(blank=True, help_text='JSON array of options for choice questions (encrypted)')),
                ('is_required', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='surveys.survey')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'db_table': 'surveys_question',
                'ordering': ['survey', 'order'],
            },
        ),
        migrations.CreateModel(
            name='PublicAccessToken',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token', models.CharField(help_text='Unique token string for public access', max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='Token expiration date')),
                ('is_active', models.BooleanField(default=True, help_text='Whether token is active')),
                ('created_by', models.ForeignKey(help_text='User who created this token', on_delete=django.db.models.deletion.CASCADE, related_name='created_tokens', to=settings.AUTH_USER_MODEL)),
                ('survey', models.ForeignKey(help_text='Survey this token provides access to', on_delete=django.db.models.deletion.CASCADE, related_name='public_tokens', to='surveys.survey')),
            ],
            options={
                'verbose_name': 'Public Access Token',
                'verbose_name_plural': 'Public Access Tokens',
                'db_table': 'surveys_public_access_token',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('answer_text', surveys.models.EncryptedTextField(help_text='Answer content (encrypted)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='surveys.question')),
                ('response', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='surveys.response')),
            ],
            options={
                'verbose_name': 'Answer',
                'verbose_name_plural': 'Answers',
                'db_table': 'surveys_answer',
                'unique_together': {('response', 'question')},
            },
        ),
        migrations.AddIndex(
            model_name='survey',
            index=models.Index(fields=['title_hash'], name='surveys_title_hash_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['text_hash'], name='questions_text_hash_idx'),
        ),
        # Run custom SQL for Oracle table creation
        migrations.RunPython(
            create_surveys_tables,
            reverse_code=drop_surveys_tables
        ),
    ]
