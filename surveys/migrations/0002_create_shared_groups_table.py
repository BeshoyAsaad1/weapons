# Generated by Django 5.2 on 2025-08-08 12:00
# Create missing SURVEYS_SURVEY_SHARED_WITH_GROUPS table

from django.db import migrations, connection


def _oracle_type_for(cursor, table_name, column_name):
    """
    Return an Oracle column type string exactly matching an existing column,
    e.g. NUMBER(19), CHAR(32), VARCHAR2(150), RAW(16), NUMBER, NUMBER(10,2)
    """
    cursor.execute(
        """
        SELECT data_type, data_length, data_precision, data_scale
        FROM user_tab_columns
        WHERE table_name = :t AND column_name = :c
        """,
        {"t": table_name.upper(), "c": column_name.upper()},
    )
    row = cursor.fetchone()
    if not row:
        raise RuntimeError(f"Column {table_name}.{column_name} not found in Oracle metadata")

    data_type, data_length, data_precision, data_scale = row
    data_type = data_type.upper()

    if data_type in ("CHAR", "NCHAR", "VARCHAR2", "NVARCHAR2", "RAW"):
        return f"{data_type}({int(data_length)})"

    if data_type == "NUMBER":
        if data_precision is None:
            return "NUMBER"
        if data_scale is None or int(data_scale) == 0:
            return f"NUMBER({int(data_precision)})"
        return f"NUMBER({int(data_precision)},{int(data_scale)})"

    # Fallback (rare)
    if data_length:
        return f"{data_type}({int(data_length)})"
    return data_type


def create_surveys_shared_groups_table(apps, schema_editor):
    """Create SURVEYS_SURVEY_SHARED_WITH_GROUPS table with Oracle-compatible SQL (exact FK type match)."""
    with connection.cursor() as cursor:
        # Resolve exact types from existing tables
        survey_id_type = _oracle_type_for(cursor, "SURVEYS_SURVEY", "ID")
        group_id_type = _oracle_type_for(cursor, "AUTHENTICATION_GROUP", "ID")

        # Choose an ID type for this new table (align with group id numeric type if applicable)
        id_type = group_id_type if group_id_type.startswith("NUMBER") else "NUMBER(19)"

        # Clean up if partially exists
        for sql in [
            "DROP TRIGGER SSG_ID_TRG",
            "DROP TABLE SURVEYS_SURVEY_SHARED_WITH_GROUPS CASCADE CONSTRAINTS",
            "DROP SEQUENCE SSG_ID_SEQ",
        ]:
            try:
                cursor.execute(sql)
            except Exception:
                pass  # ignore if it doesn't exist

        # Create table with short constraint names (≤ 30 chars)
        cursor.execute(f"""
            CREATE TABLE SURVEYS_SURVEY_SHARED_WITH_GROUPS (
                ID {id_type} PRIMARY KEY,
                SURVEY_ID {survey_id_type} NOT NULL,
                GROUP_ID {group_id_type} NOT NULL,
                CONSTRAINT FK_SSG_SURVEY FOREIGN KEY (SURVEY_ID)
                    REFERENCES SURVEYS_SURVEY(ID) ON DELETE CASCADE,
                CONSTRAINT FK_SSG_GROUP FOREIGN KEY (GROUP_ID)
                    REFERENCES AUTHENTICATION_GROUP(ID) ON DELETE CASCADE,
                CONSTRAINT UK_SSG UNIQUE (SURVEY_ID, GROUP_ID)
            )
        """)

        # Sequence (short name)
        cursor.execute("""
            CREATE SEQUENCE SSG_ID_SEQ
            START WITH 1
            INCREMENT BY 1
            NOCACHE
        """)

        # Trigger (short name)
        cursor.execute("""
            CREATE OR REPLACE TRIGGER SSG_ID_TRG
            BEFORE INSERT ON SURVEYS_SURVEY_SHARED_WITH_GROUPS
            FOR EACH ROW
            BEGIN
                IF :NEW.ID IS NULL THEN
                    SELECT SSG_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
                END IF;
            END;
        """)

        # Indexes
        cursor.execute("CREATE INDEX IDX_SSG_SURVEY ON SURVEYS_SURVEY_SHARED_WITH_GROUPS(SURVEY_ID)")
        cursor.execute("CREATE INDEX IDX_SSG_GROUP  ON SURVEYS_SURVEY_SHARED_WITH_GROUPS(GROUP_ID)")

        print("✅ Created SURVEYS_SURVEY_SHARED_WITH_GROUPS with exact FK types, sequence, trigger, and indexes.")


def drop_surveys_shared_groups_table(apps, schema_editor):
    """Drop SURVEYS_SURVEY_SHARED_WITH_GROUPS table, trigger, and sequence."""
    with connection.cursor() as cursor:
        for sql in [
            "DROP TRIGGER SSG_ID_TRG",
            "DROP TABLE SURVEYS_SURVEY_SHARED_WITH_GROUPS CASCADE CONSTRAINTS",
            "DROP SEQUENCE SSG_ID_SEQ",
        ]:
            try:
                cursor.execute(sql)
            except Exception:
                pass


class Migration(migrations.Migration):

    dependencies = [
        ('surveys', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_surveys_shared_groups_table, reverse_code=drop_surveys_shared_groups_table),
    ]
