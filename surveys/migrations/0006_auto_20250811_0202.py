# Generated by Django 5.2 on 2025-08-10 23:02

from django.db import migrations
from django.db import connection


def fix_oracle_column_mapping(apps, schema_editor):
    """
    Fix Oracle column mapping issue by dropping the problematic new columns
    and ensuring Django uses the original RESTRICTED_EMAIL and RESTRICTED_PHONE columns.
    """
    if connection.vendor != 'oracle':
        return
    
    with connection.cursor() as cursor:
        # Check if the problematic new columns exist
        cursor.execute("""
            SELECT COUNT(*) 
            FROM user_tab_columns 
            WHERE table_name = 'SURVEYS_PUBLIC_ACCESS_TOKEN' 
            AND column_name = 'RESTRICTED_EMAIL_NEW'
        """)
        
        if cursor.fetchone()[0] > 0:
            try:
                # Drop the problematic new columns that don't allow NULL
                cursor.execute("ALTER TABLE SURVEYS_PUBLIC_ACCESS_TOKEN DROP COLUMN RESTRICTED_EMAIL_NEW")
                cursor.execute("ALTER TABLE SURVEYS_PUBLIC_ACCESS_TOKEN DROP COLUMN RESTRICTED_PHONE_NEW")
                
                # Also drop any other temporary columns created during migrations
                cursor.execute("""
                    SELECT column_name 
                    FROM user_tab_columns 
                    WHERE table_name = 'SURVEYS_PUBLIC_ACCESS_TOKEN' 
                    AND column_name LIKE 'RESTRICTED_EMAIL_%'
                    AND column_name != 'RESTRICTED_EMAIL'
                """)
                temp_email_columns = [row[0] for row in cursor.fetchall()]
                
                cursor.execute("""
                    SELECT column_name 
                    FROM user_tab_columns 
                    WHERE table_name = 'SURVEYS_PUBLIC_ACCESS_TOKEN' 
                    AND column_name LIKE 'RESTRICTED_PHONE_%'
                    AND column_name != 'RESTRICTED_PHONE'
                """)
                temp_phone_columns = [row[0] for row in cursor.fetchall()]
                
                # Drop temporary columns
                for col in temp_email_columns:
                    cursor.execute(f"ALTER TABLE SURVEYS_PUBLIC_ACCESS_TOKEN DROP COLUMN {col}")
                    
                for col in temp_phone_columns:
                    cursor.execute(f"ALTER TABLE SURVEYS_PUBLIC_ACCESS_TOKEN DROP COLUMN {col}")
                    
                print("Successfully cleaned up Oracle column mapping issues")
                
            except Exception as e:
                print(f"Error cleaning up Oracle columns: {e}")


def reverse_fix_oracle_column_mapping(apps, schema_editor):
    # This is irreversible, so we do nothing
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('surveys', '0005_alter_publicaccesstoken_restricted_email_and_more'),
    ]

    operations = [
        migrations.RunPython(fix_oracle_column_mapping, reverse_fix_oracle_column_mapping),
    ]
